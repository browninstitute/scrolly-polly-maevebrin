
import root from '../root.svelte';
import { set_building, set_prerendering } from '__sveltekit/environment';
import { set_assets } from '__sveltekit/paths';
import { set_manifest, set_read_implementation } from '__sveltekit/server';
import { set_private_env, set_public_env, set_safe_public_env } from '../../../node_modules/@sveltejs/kit/src/runtime/shared-server.js';

export const options = {
	app_template_contains_nonce: false,
	csp: {"mode":"auto","directives":{"upgrade-insecure-requests":false,"block-all-mixed-content":false},"reportOnly":{"upgrade-insecure-requests":false,"block-all-mixed-content":false}},
	csrf_check_origin: true,
	embedded: false,
	env_public_prefix: 'PUBLIC_',
	env_private_prefix: '',
	hash_routing: false,
	hooks: null, // added lazily, via `get_hooks`
	preload_strategy: "modulepreload",
	root,
	service_worker: false,
	templates: {
		app: ({ head, body, assets, nonce, env }) => "<!doctype html>\n<html lang=\"en\">\n\t<head>\n\t\t<meta charset=\"utf-8\" />\n\t\t<meta name=\"description\" content=\"U.S. Exonerations: Lifetimes lost among those wrongfully convicted of murder\" />\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n\t\t\n\t\t<!-- \n\t\t// ===================================================================\n\t\t// FONT IMPORTS\n\t\t// Import Google Fonts for typography throughout the application\n\t\t// ===================================================================\n\t\t-->\n\t\t<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n\t\t<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n\t\t<link href=\"https://fonts.googleapis.com/css2?family=Cormorant+Garamond:ital,wght@0,300..700;1,300..700&family=Figtree:ital,wght@0,300..900;1,300..900&family=Fleur+De+Leah&family=IBM+Plex+Mono:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;1,100;1,200;1,300;1,400;1,500;1,600;1,700&family=Instrument+Serif:ital@0;1&family=Roboto+Condensed:ital,wght@0,100..900;1,100..900&display=swap\" rel=\"stylesheet\">\n\t\t" + head + "\n\t\t\n\t\t<!-- \n\t\t// ===================================================================\n\t\t// LOADING STATES\n\t\t// Styling to prevent Flash of Unstyled Content (FOUC) during load\n\t\t// ===================================================================\n\t\t-->\n\t\t<style>\n\t\t\t/* Initially hide content that will be replaced by Svelte */\n\t\t\t[data-mount=\"true\"] {\n\t\t\t\tdisplay: none;\n\t\t\t}\n\t\t\t\n\t\t\t/* Initial page loading overlay */\n\t\t\t.app-loading {\n\t\t\t\tposition: fixed;\n\t\t\t\ttop: 0;\n\t\t\t\tleft: 0;\n\t\t\t\twidth: 100%;\n\t\t\t\theight: 100%;\n\t\t\t\tbackground-color: #000000;\n\t\t\t\tdisplay: flex;\n\t\t\t\tjustify-content: center;\n\t\t\t\talign-items: center;\n\t\t\t\tz-index: 9999;\n\t\t\t\ttransition: opacity 0.5s ease-out;\n\t\t\t}\n\t\t\t\n\t\t\t.app-loading.hide {\n\t\t\t\topacity: 0;\n\t\t\t\tpointer-events: none;\n\t\t\t}\n\t\t\t\n\t\t\t.loading-spinner {\n\t\t\t\twidth: 50px;\n\t\t\t\theight: 50px;\n\t\t\t\tborder: 5px solid #f3f3f3;\n\t\t\t\tborder-top: 5px solid #3498db;\n\t\t\t\tborder-radius: 50%;\n\t\t\t\tanimation: spin 1s linear infinite;\n\t\t\t}\n\t\t\t\n\t\t\t@keyframes spin {\n\t\t\t\t0% { transform: rotate(0deg); }\n\t\t\t\t100% { transform: rotate(360deg); }\n\t\t\t}\n\t\t\t\n\t\t\t/* Hide all paragraphs until app is ready */\n\t\t\tbody > p {\n\t\t\t\tdisplay: none;\n\t\t\t}\n            \n            /* Smooth scrolling for the entire page */\n            html {\n                scroll-behavior: smooth;\n            }\n            \n            /* Improved scrolling performance */\n            body {\n                -webkit-font-smoothing: antialiased;\n                -moz-osx-font-smoothing: grayscale;\n                overflow-y: scroll;\n                scroll-behavior: smooth;\n            }\n\t\t</style>\n\t\t\n\t\t<!-- Open Graph and Twitter Card metadata for social sharing -->\n\t\t<meta property=\"og:title\" content=\"U.S. Exonerations: Lifetimes lost among those wrongfully convicted of murder\">\n\t\t<meta property=\"og:description\" content=\"An interactive data visualization on wrongful convictions and their impact\">\n\t\t<meta property=\"og:type\" content=\"website\">\n\t\t<meta property=\"og:image\" content=\"/images/og-preview.jpg\">\n\t\t<meta name=\"twitter:card\" content=\"summary_large_image\">\n\t\t<meta name=\"twitter:title\" content=\"U.S. Exonerations: Lifetimes lost among those wrongfully convicted of murder\">\n\t\t<meta name=\"twitter:description\" content=\"An interactive data visualization on wrongful convictions and their impact\">\n\t\t<meta name=\"twitter:image\" content=\"/images/twitter-preview.jpg\">\n\t</head>\n\t<body>\n\t\t<!-- \n\t\t// ===================================================================\n\t\t// LOADING OVERLAY\n\t\t// Initial loading state before content is rendered\n\t\t// ===================================================================\n\t\t-->\n\t\t<div class=\"app-loading\" id=\"appLoading\">\n\t\t\t<div class=\"loading-spinner\"></div>\n\t\t</div>\n\t\t\n\t\t<!-- \n\t\t// ===================================================================\n\t\t// SVELTE APP MOUNT POINT\n\t\t// Main container where SvelteKit mounts the application\n\t\t// ===================================================================\n\t\t-->\n\t\t<div id=\"svelteApp\">" + body + "</div>\n\t\t\n\t\t<!-- \n\t\t// ===================================================================\n\t\t// SCROLLYTELLER MOUNT POINTS\n\t\t// Anchors and markers for scrollytelling functionality\n\t\t// ===================================================================\n\t\t-->\n\t\t<div data-mount=\"true\" id=\"scrollytellerNAMEtest\" data-component=\"Anchor\"></div>\n\n\t\t<div data-mount=\"true\" id=\"markNUMBER1ALIGNright\"></div>\n\t\t<p>\n\t\t\tAmong the exonerees that received a term of years sentence (43%), sentences ranged from 1 to 95 years. \n\t\t</p>\n\n\t\t<div data-mount=\"true\" id=\"markNUMBER4ALIGNright\"></div>\n\t\t<p>\n\t\t\tMost exonerees (55%) are Black. Black Americans \n\t\t</p>\n\t\t<p>\n\t\t\tare incarcerated at a disproportionate rate as approximately 48% of the people serving \n\t\t</p>\n\t\t<p>\n\t\t\tlife sentences, and 37% of people in jails and prison are Black despite accounting for \n\t\t\t only 13% of the total U.S. population.\n\t\t</p>\n\n\t\t<div data-mount=\"true\" id=\"markNUMBER5ALIGN\"></div>\n\t\t<p>\n\t\t\tThe overwhelming majority of exonerees are male, reflecting both the demographics of the prison \n\t\t\tpopulation as a whole and potentially different approaches to investigating and prosecuting cases \n\t\t\tbased on gender.\n\t\t</p>\n\n\t\t<div data-mount=\"true\" id=\"endscrollyteller\"></div>\n\t\t\n\t\t<!-- \n\t\t// ===================================================================\n\t\t// LOADING SCREEN REMOVAL\n\t\t// Script to hide loading overlay once content is loaded\n\t\t// ===================================================================\n\t\t-->\n\t\t<script>\n\t\t\t// Remove loading screen once the app is mounted\n\t\t\tdocument.addEventListener('DOMContentLoaded', function() {\n\t\t\t\t// Short timeout to ensure Svelte has had time to initialize\n\t\t\t\tsetTimeout(function() {\n\t\t\t\t\tvar loadingScreen = document.getElementById('appLoading');\n\t\t\t\t\tif (loadingScreen) {\n\t\t\t\t\t\tloadingScreen.classList.add('hide');\n\t\t\t\t\t\t// Remove from DOM after transition completes\n\t\t\t\t\t\tsetTimeout(function() {\n\t\t\t\t\t\t\tloadingScreen.parentNode.removeChild(loadingScreen);\n\t\t\t\t\t\t}, 500);\n\t\t\t\t\t}\n\t\t\t\t}, 200);\n\t\t\t});\n\t\t\t\n\t\t\t// Add smooth scrolling for anchor links\n\t\t\tdocument.addEventListener('click', function(e) {\n\t\t\t\tif (e.target.tagName === 'A' && e.target.getAttribute('href') && e.target.getAttribute('href').startsWith('#')) {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\tconst targetId = e.target.getAttribute('href').substring(1);\n\t\t\t\t\tconst targetElement = document.getElementById(targetId);\n\t\t\t\t\t\n\t\t\t\t\tif (targetElement) {\n\t\t\t\t\t\twindow.scrollTo({\n\t\t\t\t\t\t\ttop: targetElement.offsetTop,\n\t\t\t\t\t\t\tbehavior: 'smooth'\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\t// Add intersection observer for animation triggers\n\t\t\tdocument.addEventListener('DOMContentLoaded', function() {\n\t\t\t\tconst animateElements = document.querySelectorAll('.animate-on-scroll');\n\t\t\t\t\n\t\t\t\tif (animateElements.length > 0 && 'IntersectionObserver' in window) {\n\t\t\t\t\tconst observer = new IntersectionObserver((entries) => {\n\t\t\t\t\t\tentries.forEach(entry => {\n\t\t\t\t\t\t\tif (entry.isIntersecting) {\n\t\t\t\t\t\t\t\tentry.target.classList.add('animate-visible');\n\t\t\t\t\t\t\t\tobserver.unobserve(entry.target);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}, { threshold: 0.2 });\n\t\t\t\t\t\n\t\t\t\t\tanimateElements.forEach(element => {\n\t\t\t\t\t\tobserver.observe(element);\n\t\t\t\t\t});\n\t\t\t\t}\n                \n                // Make scrolling smoother\n                document.querySelectorAll('a[href^=\"#\"]').forEach(anchor => {\n                    anchor.addEventListener('click', function (e) {\n                        e.preventDefault();\n                        const targetId = this.getAttribute('href');\n                        const targetElement = document.querySelector(targetId);\n                        \n                        if (targetElement) {\n                            window.scrollTo({\n                                top: targetElement.offsetTop,\n                                behavior: 'smooth'\n                            });\n                        }\n                    });\n                });\n                \n                // Improve scroll performance with debouncing\n                let lastKnownScrollPosition = 0;\n                let ticking = false;\n                \n                function doSomethingOnScroll(scrollPos) {\n                    // Throttled scroll handling\n                    // This function helps improve scroll performance\n                }\n                \n                window.addEventListener('scroll', function(e) {\n                    lastKnownScrollPosition = window.scrollY;\n                    \n                    if (!ticking) {\n                        window.requestAnimationFrame(function() {\n                            doSomethingOnScroll(lastKnownScrollPosition);\n                            ticking = false;\n                        });\n                        \n                        ticking = true;\n                    }\n                });\n                \n                // Enhance transitions between the race and gender chart sections\n                const enhanceChartTransitions = function() {\n                    // Monitor visibility of chart sections using Intersection Observer\n                    const chartSections = document.querySelectorAll('.chart-section');\n                    \n                    if (chartSections.length > 0 && 'IntersectionObserver' in window) {\n                        const chartObserver = new IntersectionObserver((entries) => {\n                            entries.forEach(entry => {\n                                if (entry.isIntersecting) {\n                                    // Add extra animation class when chart becomes visible\n                                    entry.target.classList.add('chart-visible');\n                                    \n                                    // Apply special transition for race/gender charts\n                                    if (entry.target.classList.contains('race-chart') || \n                                        entry.target.classList.contains('gender-chart')) {\n                                        entry.target.style.opacity = '0';\n                                        setTimeout(() => {\n                                            entry.target.style.opacity = '1';\n                                        }, 300);\n                                    }\n                                    \n                                    // Let the transition finish before unobserving\n                                    setTimeout(() => {\n                                        chartObserver.unobserve(entry.target);\n                                    }, 1000);\n                                }\n                            });\n                        }, { threshold: 0.3 });\n                        \n                        chartSections.forEach(section => {\n                            chartObserver.observe(section);\n                        });\n                    }\n                };\n                \n                // Initialize chart transitions after a short delay to ensure DOM is ready\n                setTimeout(enhanceChartTransitions, 500);\n\t\t\t});\n\t\t</script>\n\t</body>\n</html>",
		error: ({ status, message }) => "<!doctype html>\n<html lang=\"en\">\n\t<head>\n\t\t<meta charset=\"utf-8\" />\n\t\t<title>" + message + "</title>\n\n\t\t<style>\n\t\t\tbody {\n\t\t\t\t--bg: white;\n\t\t\t\t--fg: #222;\n\t\t\t\t--divider: #ccc;\n\t\t\t\tbackground: var(--bg);\n\t\t\t\tcolor: var(--fg);\n\t\t\t\tfont-family:\n\t\t\t\t\tsystem-ui,\n\t\t\t\t\t-apple-system,\n\t\t\t\t\tBlinkMacSystemFont,\n\t\t\t\t\t'Segoe UI',\n\t\t\t\t\tRoboto,\n\t\t\t\t\tOxygen,\n\t\t\t\t\tUbuntu,\n\t\t\t\t\tCantarell,\n\t\t\t\t\t'Open Sans',\n\t\t\t\t\t'Helvetica Neue',\n\t\t\t\t\tsans-serif;\n\t\t\t\tdisplay: flex;\n\t\t\t\talign-items: center;\n\t\t\t\tjustify-content: center;\n\t\t\t\theight: 100vh;\n\t\t\t\tmargin: 0;\n\t\t\t}\n\n\t\t\t.error {\n\t\t\t\tdisplay: flex;\n\t\t\t\talign-items: center;\n\t\t\t\tmax-width: 32rem;\n\t\t\t\tmargin: 0 1rem;\n\t\t\t}\n\n\t\t\t.status {\n\t\t\t\tfont-weight: 200;\n\t\t\t\tfont-size: 3rem;\n\t\t\t\tline-height: 1;\n\t\t\t\tposition: relative;\n\t\t\t\ttop: -0.05rem;\n\t\t\t}\n\n\t\t\t.message {\n\t\t\t\tborder-left: 1px solid var(--divider);\n\t\t\t\tpadding: 0 0 0 1rem;\n\t\t\t\tmargin: 0 0 0 1rem;\n\t\t\t\tmin-height: 2.5rem;\n\t\t\t\tdisplay: flex;\n\t\t\t\talign-items: center;\n\t\t\t}\n\n\t\t\t.message h1 {\n\t\t\t\tfont-weight: 400;\n\t\t\t\tfont-size: 1em;\n\t\t\t\tmargin: 0;\n\t\t\t}\n\n\t\t\t@media (prefers-color-scheme: dark) {\n\t\t\t\tbody {\n\t\t\t\t\t--bg: #222;\n\t\t\t\t\t--fg: #ddd;\n\t\t\t\t\t--divider: #666;\n\t\t\t\t}\n\t\t\t}\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<div class=\"error\">\n\t\t\t<span class=\"status\">" + status + "</span>\n\t\t\t<div class=\"message\">\n\t\t\t\t<h1>" + message + "</h1>\n\t\t\t</div>\n\t\t</div>\n\t</body>\n</html>\n"
	},
	version_hash: "1ecrogo"
};

export async function get_hooks() {
	let handle;
	let handleFetch;
	let handleError;
	let init;
	

	let reroute;
	let transport;
	

	return {
		handle,
		handleFetch,
		handleError,
		init,
		reroute,
		transport
	};
}

export { set_assets, set_building, set_manifest, set_prerendering, set_private_env, set_public_env, set_read_implementation, set_safe_public_env };
